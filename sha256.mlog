set b32mask 0xffffffff
waitForData:
read chunks cell1 0
jump waitForData equal chunks 0
write 0x6a09e667 cell1 1
write 0xbb67ae85 cell1 2
write 0x3c6ef372 cell1 3
write 0xa54ff53a cell1 4
write 0x510e527f cell1 5
write 0x9b05688c cell1 6
write 0x1f83d9ab cell1 7
write 0x5be0cd19 cell1 8
set a 0
set b 0
set c 0
set d 0
set e 0
set f 0
set g 0
set h 0
set h0 0x6a09e667
set h1 0xbb67ae85
set h2 0x3c6ef372
set h3 0xa54ff53a
set h4 0x510e527f
set h5 0x9b05688c
set h6 0x1f83d9ab
set h7 0x5be0cd19
set chunk 0
chunkParse:
op mul ind chunk 16
set destindx 0
initialfill:#correct
op add bank_call @counter 1
jump readval always
write val cell4 destindx
op add ind ind 1
op add destindx destindx 1
jump initialfill lessThan destindx 16
set i 16
extendData:#incorrect
op sub index i 15
read data cell4 index
set shift 7
op add rot_call @counter 1
jump rightrot always
set data1 data
read data cell4 index
set shift 18
op add rot_call @counter 1
jump rightrot always
set data2 data
read data3 cell4 index
op shr data3 data3 3
op xor data data2 data3
op xor s0 data data1
op sub index i 2
read data cell4 index
set shift 17
op add rot_call @counter 1
jump rightrot always
set data1 data
read data cell4 index
set shift 19
op add rot_call @counter 1
jump rightrot always
set data2 data
read data3 cell4 index
op shr data3 data3 10
op xor data data2 data3
op xor s1 data data1
op add s0 s0 s1
op sub index i 16
read w-16 cell4 index
op add cur s0 w-16
op sub index i 7
read w-7 cell4 index
op add cur cur w-7
op and cur cur b32mask
write cur cell4 i 
op add i i 1
jump extendData lessThan i 64#correct
read a cell1 1
read b cell1 2
read c cell1 3
read d cell1 4
read e cell1 5
read f cell1 6
read g cell1 7
read h cell1 8
set i 0
compression:
set data e
set shift 6
op add rot_call @counter 1
jump rightrot always
set data1 data
set data e
set shift 11
op add rot_call @counter 1
jump rightrot always
set data2 data
set data e
set shift 25
op add rot_call @counter 1
jump rightrot always
set data3 data
op xor S1 data1 data2
op xor S1 S1 data3
op and ch1 e f
op xor ch2 b32mask e
op and ch2 ch2 g
op xor ch ch1 ch2
op add temp1 h S1
op add temp1 temp1 ch
read k cell2 i
read w cell4 i
op add temp1 temp1 k
op add temp1 temp1 w
op and temp1 temp1 b32mask
set data a
set shift 2
op add rot_call @counter 1
jump rightrot always
set data1 data
set data a
set shift 13
op add rot_call @counter 1
jump rightrot always
set data2 data
set data a
set shift 22
op add rot_call @counter 1
jump rightrot always
set data3 data
op xor S0 data1 data2
op xor S0 S0 data3
op and maj1 a b
op and maj2 a c
op and maj3 b c
op xor maj maj1 maj2
op xor maj maj maj3
op add temp2 S0 maj
op and temp2 temp2 b32mask
set h g
set g f
set f e
op add e d temp1
op and e e b32mask
set d c
set c b
set b a
op add a temp1 temp2
op and a a b32mask
op add i i 1
jump compression lessThan i 64
read h0 cell1 1
read h1 cell1 2
read h2 cell1 3
read h3 cell1 4
read h4 cell1 5
read h5 cell1 6
read h6 cell1 7
read h7 cell1 8
op add h0 h0 a
op add h1 h1 b
op add h2 h2 c
op add h3 h3 d
op add h4 h4 e
op add h5 h5 f
op add h6 h6 g
op add h7 h7 h
op and h0 h0 b32mask
op and h1 h1 b32mask
op and h2 h2 b32mask
op and h3 h3 b32mask
op and h4 h4 b32mask
op and h5 h5 b32mask
op and h6 h6 b32mask
op and h7 h7 b32mask
write h0 cell1 1
write h1 cell1 2
write h2 cell1 3
write h3 cell1 4
write h4 cell1 5
write h5 cell1 6
write h6 cell1 7
write h7 cell1 8
op add chunk chunk 1
jump chunkParse lessThan chunk chunks
write h0 cell3 0
write h1 cell3 1
write h2 cell3 2
write h3 cell3 3
write h4 cell3 4
write h5 cell3 5
write h6 cell3 6
write h7 cell3 7
write 0 cell1 0
end
readval:
op idiv hi ind 512
op mod lo ind 512
getlink bank hi
read val bank lo
set @counter bank_call
writeval:
op idiv hi ind 512
op mod lo ind 512
getlink bank hi
write val bank lo
set @counter bank_call
rightrot:
op pow rotmask 2 shift
op sub rotmask rotmask 1
op sub rshift 32 shift
op and disposed data rotmask
op shl disposed disposed rshift
op shr data data shift
op or data data disposed
op and data data b32mask
set @counter rot_call